version: 2.1

orbs: 
  kubernetes: circleci/kubernetes@1.3.0
  aws-cli: circleci/aws-cli@2.1.0

#Define runner executor once for use throughout the pipeline
executors:
  k8s-runner:
    machine: true
    resource_class: jtreutel/runner-test-k8s-2022

#Define list of microservices and the k8s objects that need to be deployed for each
matrix-params: &matrix-params
  parameters:
    microservice: [frontend, redis-master, redis-replica]
    object: [deployment, service]

commands:
  prereqs:
    steps:
      - attach_workspace:
          at: .
      - aws-cli/setup:
          profile-name: default
      - kubernetes/install-kubectl
      - kubernetes/install-kubeconfig

jobs:
  checkout-code:
    # This job does not need to be run on-prem
    docker:
      - image: cimg/base:2022.03
    # We are caching data generated in a cloud container and passing it to our on-prem CircleCI Runner
    steps:
      - checkout
      - persist_to_workspace:
          root: .
          paths:
          - .
  create-temporary-namespace:
    executor: k8s-runner
    steps:
      - prereqs
      - run:
          name: Create temporary namespace 
          command: kubectl create namespace "circleci-${CIRCLE_PROJECT_REPONAME}-${CIRCLE_SHA1:0:7}"
  deploy:
    parameters:
      # Name of microservice and object that will be deployed
      microservice: 
        type: string
      object:
        type: string
    executor: k8s-runner
    steps:
      - prereqs
      # Deploy k8s object
      - kubernetes/create-or-update-resource:
          get-rollout-status: false #doesn't work with services
          resource-file-path: manifests/<< parameters.microservice >>-<< parameters.object >>.yaml
          resource-name: << parameters.object >>/<< parameters.microservice >>
          show-kubectl-command: true
          namespace: circleci-${CIRCLE_PROJECT_REPONAME}-${CIRCLE_SHA1:0:7}
      - run: 
          name: Get port and IP of service and store in BASH_ENV for use in next steps
          command: echo "export SVC_PORT_AND_IP=\"$(kubectl get svc << parameters.microservice >> -o=jsonpath='{.spec.clusterIP}'):$(kubectl get svc << parameters.microservice >> -o=jsonpath='{.spec.ports[0].port}' -n circleci-${CIRCLE_PROJECT_REPONAME}-${CIRCLE_SHA1:0:7})\"" >> $BASH_ENV
      # Wait for service to become available (only run this on jobs that deploy a service)
      # Get port and IP of service and store in BASH_ENV for use in next steps
      - run:
          name: Check if service is running
          command: |
            if [ "<< parameters.object >>" == "service" ]; then \
              if [ ! -f "/usr/local/bin/dockerize" ]; then \
                wget https://github.com/jwilder/dockerize/releases/download/v0.6.1/dockerize-linux-amd64-v0.6.1.tar.gz && \
                sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-v0.6.1.tar.gz && rm dockerize-linux-amd64-v0.6.1.tar.gz; \
              fi; \
              export SVC_PORT_AND_IP="$(kubectl get svc << parameters.microservice >> -o=jsonpath='{.spec.clusterIP}'):$(kubectl get svc << parameters.microservice >> -o=jsonpath='{.spec.ports[0].port}')" && \
              dockerize -wait "tcp://$SVC_PORT_AND_IP" -timeout 1m; \
            else \
              echo "Object is not a service, skipping."; \
            fi

  execute-tests:
    executor: k8s-runner
    steps:
      - prereqs
      - run: mkdir test_results
      # Run a "test" that gets contents of Angular app running on recently deployed pod
      - run: |
          export SVC_PORT_AND_IP="$(kubectl get svc frontend -o=jsonpath='{.spec.clusterIP}' -n circleci-${CIRCLE_PROJECT_REPONAME}-${CIRCLE_SHA1:0:7}):$(kubectl get svc frontend -o=jsonpath='{.spec.ports[0].port}' -n circleci-${CIRCLE_PROJECT_REPONAME}-${CIRCLE_SHA1:0:7})"; \
          curl "$SVC_PORT_AND_IP" | tee test_results/frontend.txt
      # Upload test result to CircleCI UI
      - store_artifacts:
          path: test_results/frontend.txt
          destination: curl-frontend-results.txt

  delete:
    parameters:
      # Name of microservice and object that will be deployed
      microservice: 
        type: string
      object:
        type: string
    executor: k8s-runner
    steps:
      - prereqs
      # Clean up deployed resources
      - kubernetes/delete-resource:
          now: true
          resource-names: << parameters.microservice >>
          resource-types: << parameters.object >>
          wait: true
          namespace: circleci-${CIRCLE_PROJECT_REPONAME}-${CIRCLE_SHA1:0:7}

  #Technically we can do all the cleanup with just this job
  delete-temporary-namespace:
    executor: k8s-runner
    steps:
      - prereqs
      - run:
          name: Delete temporary namespace 
          command: kubectl delete namespace "circleci-${CIRCLE_PROJECT_REPONAME}-${CIRCLE_SHA1:0:7}"
          

workflows:
  testing:
    jobs:
      - checkout-code
      - create-temporary-namespace:
          requires:
            - checkout-code
          context: kubeconfig       
      - deploy:
          matrix:
            <<: *matrix-params
          requires:
            - create-temporary-namespace
          context: kubeconfig       
      - execute-tests:
          requires:
            - deploy
      - manual-approval:
          type: approval
          requires:
            - execute-tests
      - delete:
          matrix:
            <<: *matrix-params
          requires:
            - manual-approval
            #- execute-tests
          context: kubeconfig       
      - delete-temporary-namespace:
          requires:
            - delete
          context: kubeconfig       
